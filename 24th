1)#include <iostream>
#include <vector>
using namespace std;

int binarySearchDescending(const vector<int>& arr, int target) {
    int low = 0, high = arr.size() - 1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (arr[mid] == target) {
            return mid;  // Found the target
        } else if (arr[mid] > target) {
            low = mid + 1;  // Search in the left part
        } else {
            high = mid - 1;  // Search in the right part
        }
    }
    
    return -1;  // Target not found
}

int main() {
    vector<int> arr = {10, 8, 6, 4, 2, 0};
    int target = 4;
    cout << "Index of " << target << ": " << binarySearchDescending(arr, target) << endl;
    return 0;
}

2)#include <iostream>
#include <vector>
using namespace std;

int binarySearchInfiniteArray(const vector<int>& arr, int target) {
    int low = 0, high = 1;
    
    // Find bounds (high must be greater than target)
    while (arr[high] < target) {
        low = high;
        high *= 2;
    }
    
    // Perform binary search within the found bounds
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (arr[mid] == target) {
            return mid;  // Found the target
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    
    return -1;  // Target not found
}

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};
    int target = 7;
    cout << "Index of " << target << ": " << binarySearchInfiniteArray(arr, target) << endl;
    return 0;
}

3)#include <iostream>
#include <vector>
using namespace std;

bool searchMatrix(const vector<vector<int>>& matrix, int target) {
    int m = matrix.size(), n = matrix[0].size();
    int low = 0, high = m * n - 1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        int midValue = matrix[mid / n][mid % n];
        
        if (midValue == target) {
            return true;
        } else if (midValue < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    
    return false;  // Target not found
}

int main() {
    vector<vector<int>> matrix = {
        {1, 3, 5, 7},
        {10, 11, 16, 20},
        {23, 30, 34, 60}
    };
    int target = 3;
    cout << "Target " << target << " found: " << (searchMatrix(matrix, target) ? "True" : "False") << endl;
    return 0;
}

4)#include <iostream>
#include <vector>
using namespace std;

bool searchInRotatedArray(const vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (nums[mid] == target) {
            return true;
        }
        
        // Check if left part is sorted
        if (nums[low] <= nums[mid]) {
            if (nums[low] <= target && target < nums[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        // Right part is sorted
        else {
            if (nums[mid] < target && target <= nums[high]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
    }
    
    return false;  // Target not found
}

int main() {
    vector<int> nums = {2, 5, 6, 0, 0, 1, 2};
    int target = 0;
    cout << "Target " << target << " found: " << (searchInRotatedArray(nums, target) ? "True" : "False") << endl;
    return 0;
}
