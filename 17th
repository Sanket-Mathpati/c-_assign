1)#include <iostream>
#include <algorithm>
using namespace std;

string concatenateWithReverse(string str) {
    string revStr = str;
    reverse(revStr.begin(), revStr.end());
    return str + revStr;
}

int main() {
    string str = "PWSkills";
    cout << concatenateWithReverse(str) << endl;  // Output: "PWSkillssllikSWP"
    return 0;
}

2)#include <iostream>
#include <set>
using namespace std;

int secondLargestDigit(string str) {
    set<int> digits;
    for (char ch : str) {
        if (isdigit(ch))
            digits.insert(ch - '0');
    }
    if (digits.size() < 2) return -1; // No second largest digit
    auto it = digits.rbegin(); 
    return *(++it);
}

int main() {
    string str = "2947578";
    cout << secondLargestDigit(str) << endl;  // Output: 8
    return 0;
}

3)#include <iostream>
using namespace std;

bool isVowel(char ch) {
    return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');
}

int countVowelSubstrings(string str) {
    int count = 0;
    for (int i = 0; i < str.length(); i++) {
        if (isVowel(str[i])) {
            count++; // Single vowel substring
            for (int j = i + 1; j < str.length() && isVowel(str[j]); j++) {
                count++; // Extend substring
            }
        }
    }
    return count;
}

int main() {
    string str = "abjkoe";
    cout << countVowelSubstrings(str) << endl;  // Output: 4
    return 0;
}

4)#include <iostream>
#include <algorithm>
using namespace std;

bool isAnagram(string s, string t) {
    if (s.length() != t.length()) return false;
    sort(s.begin(), s.end());
    sort(t.begin(), t.end());
    return s == t;
}

int main() {
    string s = "car", t = "arc";
    cout << (isAnagram(s, t) ? "True" : "False") << endl;  // Output: True
    return 0;
}

5)#include <iostream>
#include <sstream>
using namespace std;

string lexicographicallyMaxWord(string str) {
    stringstream ss(str);
    string word, maxWord;
    while (ss >> word) {
        if (word > maxWord) {
            maxWord = word;
        }
    }
    return maxWord;
}

int main() {
    string str = "proud to be pwians";
    cout << lexicographicallyMaxWord(str) << endl;  // Output: pwians
    return 0;
}
