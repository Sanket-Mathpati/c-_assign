1)#include <iostream>
#include <vector>
using namespace std;

int findLastOccurrence(const vector<int>& arr, int x) {
    int low = 0, high = arr.size() - 1, result = -1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (arr[mid] == x) {
            result = mid;  // Found 'x', but continue to search in the right half
            low = mid + 1;
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return result;
}

int main() {
    vector<int> arr = {1, 2, 3, 3, 4, 4, 4, 5};
    int x = 4;
    cout << "Last occurrence of " << x << " is at index: " << findLastOccurrence(arr, x) << endl;
    return 0;
}

2)#include <iostream>
#include <vector>
using namespace std;

int countOnes(const vector<int>& arr) {
    int low = 0, high = arr.size() - 1, firstOneIndex = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == 1) {
            firstOneIndex = mid;
            high = mid - 1; // Search for the first occurrence of 1
        } else {
            low = mid + 1;
        }
    }

    return (firstOneIndex == -1) ? 0 : arr.size() - firstOneIndex;
}

int main() {
    vector<int> arr = {0, 0, 0, 0, 1, 1};
    cout << "Number of 1's: " << countOnes(arr) << endl;
    return 0;
}

3)#include <iostream>
#include <vector>
using namespace std;

int findRowWithMaxOnes(const vector<vector<int>>& matrix) {
    int maxRowIndex = -1, maxOnes = -1;
    int n = matrix.size(), m = matrix[0].size();
    
    for (int i = 0; i < n; i++) {
        int low = 0, high = m - 1, firstOneIndex = -1;

        // Binary search for first occurrence of 1 in row i
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (matrix[i][mid] == 1) {
                firstOneIndex = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        if (firstOneIndex != -1) {
            int onesCount = m - firstOneIndex;
            if (onesCount > maxOnes) {
                maxOnes = onesCount;
                maxRowIndex = i;
            }
        }
    }
    return maxRowIndex;
}

int main() {
    vector<vector<int>> matrix = {
        {0, 1, 1, 1},
        {0, 0, 1, 1},
        {1, 1, 1, 1},
        {0, 0, 0, 0}
    };
    cout << "Row with maximum 1's is: " << findRowWithMaxOnes(matrix) << endl;
    return 0;
}

4)#include <iostream>
#include <vector>
using namespace std;

int findDuplicate(const vector<int>& arr) {
    int low = 0, high = arr.size() - 1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (arr[mid] == arr[mid + 1] || arr[mid] == arr[mid - 1]) {
            return arr[mid];
        }

        if (arr[mid] < arr[mid + 1]) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;  // No duplicate found
}

int main() {
    vector<int> arr1 = {1, 2, 3, 3, 4};
    vector<int> arr2 = {1, 2, 2, 3, 4, 5};
    cout << "Duplicate in arr1: " << findDuplicate(arr1) << endl;
    cout << "Duplicate in arr2: " << findDuplicate(arr2) << endl;
    return 0;
}

5)#include <iostream>
#include <cmath>
using namespace std;

bool isPerfectSquare(int n) {
    int sqrtN = sqrt(n);
    return sqrtN * sqrtN == n;
}

int main() {
    int n1 = 36, n2 = 45;
    cout << "Is 36 a perfect square? " << (isPerfectSquare(n1) ? "Yes" : "No") << endl;
    cout << "Is 45 a perfect square? " << (isPerfectSquare(n2) ? "Yes" : "No") << endl;
    return 0;
}

6)#include <iostream>
#include <cmath>
using namespace std;

int arrangeCoins(int n) {
    return (-1 + sqrt(1 + 8 * n)) / 2;
}

int main() {
    int n1 = 5, n2 = 8;
    cout << "Rows for 5 coins: " << arrangeCoins(n1) << endl;
    cout << "Rows for 8 coins: " << arrangeCoins(n2) << endl;
    return 0;
}
